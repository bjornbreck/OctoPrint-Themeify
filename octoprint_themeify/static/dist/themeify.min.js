!function(g){function I(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,I),n.l=!0,n.exports}var C={};I.m=g,I.c=C,I.d=function(g,C,A){I.o(g,C)||Object.defineProperty(g,C,{configurable:!1,enumerable:!0,get:A})},I.n=function(g){var C=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(C,"a",C),C},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="",I(I.s=0)}([function(g,I,C){C(1),g.exports=C(2)},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * View model for OctoPrint-Themeify\n *\n * Author: Birk Johansson\n * License: MIT\n */\n$(function () {\n  function ThemeifyViewModel(parameters) {\n    var self = this;\n    self.classId = 'themeify';\n    self.settings = parameters[0];\n    self.ownSettings = {};\n    self.customRules = []; //These hold the customized and built-in changed/overriden elements, respectively\n\n    self.customizedElements = [];\n    self.builtInElements = [];\n    self._ownSettingsPrev = {}; //holds subscriptions, so that they can be removed later\n\n    self.configSubscriptions = {\n      enabled: '',\n      theme: ''\n    };\n    self.tabIcons = {};\n    self.oldTabContent = {};\n\n    var oldVal = function oldVal(key) {\n      return self._ownSettingsPrev[key];\n    };\n\n    self.onStartupComplete = function () {\n      var htmlId = $('html').attr('id'); //Remove styling if touch is enabled\n\n      if (htmlId && htmlId == 'touch') {\n        $('html').removeClass(self.classId);\n      }\n\n      self.updateColors();\n\n      self._updateCustomRules();\n    };\n\n    self.setupIcons = function () {\n      self.tabIcons.tabs().filter(function (tab) {\n        return tab.domId() && tab.enabled();\n      }).map(function (tab, i) {\n        var domId = tab.domId,\n            enabled = tab.enabled,\n            faIcon = tab.faIcon;\n        var icon = $(\"<i>\", {\n          class: faIcon()\n        });\n        var elem$ = $(\"\".concat(domId(), \" a\"));\n\n        if (elem$ && elem$.closest('ul').attr('id') === 'tabs') {\n          self.oldTabContent[domId()] = $(\"\".concat(domId(), \" a\")).html();\n          elem$.html(icon);\n        } else {\n          console.warn(\"Themeify: Failed to add icon! \".concat(domId(), \" is not a child of the tab-list!\"));\n        }\n      });\n    };\n\n    self.restoreTabs = function () {\n      self.tabIcons.tabs().filter(function (tab) {\n        return tab.domId();\n      }).map(function (tab, i) {\n        var domId = tab.domId,\n            enabled = tab.enabled,\n            faIcon = tab.faIcon;\n        var oldContent = self.oldTabContent[domId()];\n\n        if (oldContent) {\n          $(\"\".concat(domId(), \" a\")).html(oldContent);\n        }\n      });\n    };\n\n    self.enableBeforeLoaded = function () {\n      var localTheme = localStorage.getItem('theme');\n\n      if (localTheme) {\n        $('html').addClass(self.classId).addClass(localTheme);\n      }\n    };\n\n    self.enable = function () {\n      if (self.ownSettings.enabled() && $('html').attr('id') !== 'touch') {\n        var theme = self.ownSettings.theme();\n        localStorage.setItem('theme', theme);\n        $('html').addClass(self.classId).addClass(self.ownSettings.theme());\n      }\n    };\n\n    self.addNewCustomRule = function () {\n      var ruleObj = {\n        selector: ko.observable(''),\n        rule: ko.observable(''),\n        value: ko.observable(''),\n        enabled: ko.observable(true)\n      };\n\n      self._subscribeToDictValues(ruleObj, 'customRules');\n\n      self.ownSettings.customRules.push(ruleObj);\n    };\n\n    self.addNewIcon = function () {\n      var icon = {\n        domId: ko.observable(''),\n        enabled: ko.observable(true),\n        faIcon: ko.observable('')\n      };\n\n      self._subscribeToDictValues(icon, 'tabs');\n\n      self.tabIcons.tabs.push(icon);\n    };\n\n    self.onBeforeBinding = function () {\n      self.settings = self.settings.settings;\n      self.ownSettings = self.settings.plugins.themeify;\n      self.customRules = self.ownSettings.customRules.extend({\n        rateLimit: 50\n      });\n      self.onRuleToggle = self.onRuleToggle;\n      self.tabIcons = {\n        enabled: self.ownSettings.tabs.enableIcons,\n        tabs: self.ownSettings.tabs.icons\n      };\n\n      if (self.tabIcons.enabled()) {\n        self.setupIcons();\n      }\n\n      self.enable();\n\n      self._copyOwnSettings();\n    };\n\n    self.updateColors = function () {\n      self._removeBuiltInStyles();\n\n      if (self.ownSettings.enableCustomization()) {\n        self.ownSettings.color().filter(function (rule) {\n          return !!rule.enabled();\n        }).map(function (rule, i) {\n          self._applyRule(rule, true);\n        });\n      }\n    };\n\n    self._updateCustomRules = function () {\n      self._removeCustomStyles();\n\n      self.updateColors();\n\n      if (self.ownSettings.enableCustomization()) {\n        self.ownSettings.customRules().filter(function (rule) {\n          return !!rule.enabled();\n        }).map(function (rule) {\n          self._applyRule(rule);\n        });\n      }\n    };\n\n    self._applyRule = function (rule) {\n      var builtIn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var elem = $(rule.selector());\n      var old = elem.css(rule.rule());\n\n      if (builtIn) {\n        self.builtInElements.push({\n          elem: elem,\n          rule: rule.rule(),\n          old: old\n        });\n      } else {\n        self.customizedElements.push({\n          elem: elem,\n          rule: rule.rule(),\n          old: old\n        });\n      }\n\n      $(rule.selector()).css(rule.rule(), rule.value());\n    };\n\n    self.clone = function (obj) {\n      //get observable value\n      if (typeof obj == 'function') {\n        return obj();\n      }\n\n      if (obj === null || _typeof(obj) !== 'object' || 'isActiveClone' in obj) return obj;\n      if (obj instanceof Date) var temp = new obj.constructor();else var temp = obj.constructor();\n\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          obj['isActiveClone'] = null;\n          temp[key] = self.clone(obj[key]);\n          delete obj['isActiveClone'];\n        }\n      }\n\n      return temp;\n    };\n\n    self._copyOwnSettings = function () {\n      Object.keys(self.ownSettings).forEach(function (key, i) {\n        self._ownSettingsPrev[key] = self.clone(self.ownSettings[key]);\n      });\n    };\n\n    self.onChange = function (settingKey, newVal) {\n      self.updateColors();\n\n      self._copyOwnSettings();\n    };\n\n    self.onColorChange = function (elem, color) {\n      self.updateColors();\n\n      self._copyOwnSettings();\n    };\n\n    self.onCustomRuleChange = function (rule) {\n      self.updateColors();\n\n      if (rule.rule() && rule.selector() && rule.value()) {\n        self._updateCustomRules();\n      }\n    };\n\n    self.onThemeChange = function (newVal) {\n      var prev = oldVal('theme');\n\n      var hasClass = function hasClass(clazz) {\n        return $('html').hasClass(clazz);\n      };\n\n      if (!hasClass(newVal)) {\n        localStorage.setItem('theme', newVal);\n        $('html').addClass(newVal).removeClass(prev);\n      }\n\n      self._copyOwnSettings();\n    };\n\n    self.onEnabledChange = function (newVal) {\n      if (newVal && $('html').attr('id') !== 'touch') {\n        var theme = self.ownSettings.theme();\n        $('html').addClass(self.classId).addClass(theme);\n        localStorage.setItem('theme', theme);\n      } else {\n        $('html').removeClass(self.classId);\n        localStorage.setItem('theme', false);\n      }\n\n      self._copyOwnSettings();\n    };\n\n    self.onEnableCustomizationChange = function (newVal) {\n      if (newVal) {\n        self.updateColors();\n\n        self._updateCustomRules();\n      } else {\n        self._removeBuiltInStyles();\n\n        self._removeCustomStyles();\n      }\n\n      self._copyOwnSettings();\n    };\n\n    self.onIconsEnableChange = function (newVal) {\n      if (newVal) {\n        self.setupIcons();\n      } else {\n        self.restoreTabs();\n      }\n    };\n\n    self.onIconChange = function (icon, value, propKey) {\n      if (!self.tabIcons.enabled()) return;\n\n      if (propKey === 'enabled' && !value) {\n        self.restoreTabs();\n      }\n\n      self.setupIcons();\n    };\n\n    self._removeCustomStyles = function () {\n      self.customizedElements.map(function (elem) {\n        return elem.elem.css(elem.rule, '');\n      });\n    };\n\n    self._removeBuiltInStyles = function () {\n      self.builtInElements.map(function (elem) {\n        return elem.elem.css(elem.rule, '');\n      });\n    };\n\n    self._removeCustomStylesByRule = function (rule) {\n      $(rule.selector()).css(rule.rule(), '');\n    };\n\n    self.onRuleToggle = function (rule) {\n      rule.enabled(!rule.enabled()); //onCustomColorChange will pickup this change and update accordingly\n    };\n\n    self.ruleIsDeleteable = function (rule) {\n      //deleteable if not exists\n      if (!rule.deletable || typeof rule.deletable !== 'function') {\n        return true;\n      }\n\n      return rule.deletable();\n    };\n\n    self.onCustomRuleDelete = function (rule) {\n      if (self.ruleIsDeleteable(rule)) {\n        self.customRules.remove(rule);\n\n        self._updateCustomRules();\n      }\n    };\n\n    self.onIconDelete = function (icon) {\n      self.restoreTabs();\n      self.tabIcons.tabs.remove(icon);\n      self.setupIcons();\n    };\n\n    self._subscribeToDictValues = function (dict, key, subscribeFunc) {\n      var subFunc = subscribeFunc ? subscribeFunc.bind(this, dict) : self.onCustomRuleChange.bind(this, dict);\n      Object.keys(dict).map(function (dictAttr) {\n        self.configSubscriptions[key].push(dict[dictAttr].subscribe(function (val) {\n          return subFunc(val, dictAttr);\n        }));\n      });\n    };\n\n    self.onSettingsShown = function () {\n      var _this = this;\n\n      //subscribe to changes\n      Object.keys(self.ownSettings).map(function (key, i) {\n        if (key == 'customRules') {\n          self.configSubscriptions[key] = [];\n          self.customRules().map(function (rule, i) {\n            //subscribe to the attributes (selector, rule, value, enabled etc)\n            self._subscribeToDictValues(rule, key);\n          });\n        } else if (key == 'color') {\n          self.configSubscriptions[key] = [];\n          var subFunc = self.onColorChange; //Loop rules\n\n          self.ownSettings.color().map(function (rule, i) {\n            //subscribe to the attributes (selector, rule, value, enabled etc)\n            self._subscribeToDictValues(rule, key, subFunc);\n          });\n        } else if (key == 'tabs') {\n          var sub = self.configSubscriptions[key] = [];\n          var _self$tabIcons = self.tabIcons,\n              enabled = _self$tabIcons.enabled,\n              tabs = _self$tabIcons.tabs;\n          sub.push(enabled.subscribe(self.onIconsEnableChange));\n          tabs().map(function (tab, i) {\n            self._subscribeToDictValues(tab, key, self.onIconChange);\n          });\n        } else {\n          //Use the map for simple subscriptions\n          var onChangeFunc = self.configOnChangeMap[key] ? self.configOnChangeMap[key] : self.onChange.bind(_this, key);\n          self.configSubscriptions[key] = self.ownSettings[key].subscribe(onChangeFunc);\n        }\n      });\n    };\n\n    self.onSettingsHidden = function () {\n      //Cleanup subscriptions\n      Object.keys(self.configSubscriptions).map(function (key, i) {\n        if (Array.isArray(self.configSubscriptions[key])) {\n          self.configSubscriptions[key].forEach(function (elem) {\n            elem.dispose();\n          });\n        } else {\n          self.configSubscriptions[key].dispose();\n        }\n      });\n    }; //optimize \"flicker\" before theme is loaded\n\n\n    self.enableBeforeLoaded();\n    self.configOnChangeMap = {\n      enabled: self.onEnabledChange,\n      theme: self.onThemeChange,\n      enableCustomization: self.onEnableCustomizationChange\n    };\n  }\n\n  OCTOPRINT_VIEWMODELS.push([ThemeifyViewModel, ['settingsViewModel'], ['#settings_plugin_themeify']]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL29jdG9wcmludF90aGVtZWlmeS9zdGF0aWMvbGVzcy9iYXNlLmxlc3M/ZTc2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vb2N0b3ByaW50X3RoZW1laWZ5L3N0YXRpYy9sZXNzL2Jhc2UubGVzc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")}]);